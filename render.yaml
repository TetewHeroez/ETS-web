# render.yaml
services:
  # Layanan untuk Aplikasi Laravel (sekarang pakai Docker)
  - type: web
    name: nama-aplikasi-anda # Ganti dengan nama aplikasi Anda
    env: docker # <-- INI KUNCI UTAMANYA!
    plan: free # atau 'starter'

    # Beri tahu Render di mana menemukan Dockerfile Anda
    dockerfilePath: ./Dockerfile

    # Kita tidak perlu 'buildCommand' atau 'startCommand' lagi
    # Karena semua itu sudah ada di dalam 'Dockerfile'

    healthCheckPath: /up # Pastikan Anda punya route '/up'

    envVars:
      - key: APP_URL
        value: https://nama-aplikasi-anda.onrender.com
      - key: APP_KEY
        generateValue: true # Render akan generate ini saat build pertama
      - key: DATABASE_URL
        fromDatabase:
          name: db-laravel # Sesuaikan dengan nama service database
          property: connectionString
      # Penting: Beri tahu Nginx di dalam container untuk jalan di mode prod
      - key: NGINX_ERROR_LOG_LEVEL
        value: error
      - key: NGINX_CLIENT_MAX_BODY_SIZE
        value: 10m # Atur batas upload file jika perlu

  # Layanan untuk Database (Tidak berubah)
  - type: psql # atau 'mysql'
    name: db-laravel
    plan: free

# render.yaml
services:
  - type: web
    name: nama-aplikasi-anda
    # ... (semua konfigurasi dari Langkah 2) ...
    
  - type: psql
    name: db-laravel
    # ... (konfigurasi database) ...

  # JOB: Jalankan migrasi SETELAH deploy berhasil
  - type: job
    name: migrator
    plan: free
    # Gunakan image yang SAMA persis dengan web service Anda
    image:
      fromService:
        type: web
        name: nama-aplikasi-anda # Pastikan nama ini sama
    # Perintah yang ingin dijalankan
    startCommand: php artisan migrate --force
    # Kapan harus dijalankan?
    triggers:
      - type: successful_deploy # Hanya jalan jika deploy web service berhasil
        service: nama-aplikasi-anda # Service yang ditonton